if (USE_BACKEND_LOCAL)
  set(T "local")
  add_library(${T} local.cpp)
  target_link_libraries(${T} distr use_dims)
endif()

if (USE_BACKEND_CUBISM)
  set(T "cubismnc")
  add_library(${T} cubismnc.cpp)
  target_link_libraries(${T} hdf distr)
  target_compile_definitions(${T} PRIVATE _ALIGNBYTES_=16)
  target_compile_definitions(${T} PRIVATE _USE_HDF_)
  target_compile_options(${T} PRIVATE -Wall -Wextra -pedantic -Wno-shadow)
  if (USE_FPZIP)
    target_link_libraries(${T} fpzip)
  endif ()
  target_compile_definitions(${T} PRIVATE _USE_FPZIP_=$<BOOL:${USE_FPZIP}>)
endif()

if (USE_BACKEND_NATIVE)
  set(T "native")
  add_library(${T} native.cpp)
  target_link_libraries(${T} PUBLIC distr dump_raw dump_xmf PRIVATE use_dims)

  set(T "comm_manager")
  add_library(${T} comm_manager.cpp)
  target_link_libraries(${T} PUBLIC distr PRIVATE use_mpi)
endif()

set(T "report")
add_library(${T} report.cpp)
target_link_libraries(${T})

set(T "distr")
add_library(${T} distr.cpp)
target_link_libraries(${T}
    sysinfo report parser suspender vars histogram dumper git subcomm openmp
    use_dims)

set(T "distrsolver")
add_library(${T} distrsolver.cpp)
target_link_libraries(${T} PUBLIC distr utildistr utilmpi PRIVATE use_backend)
if (USE_BACKEND_CUBISM)
  target_link_libraries(${T} PUBLIC cubismnc)
endif()
if (USE_BACKEND_LOCAL)
  target_link_libraries(${T} PUBLIC local)
endif()
if (USE_BACKEND_NATIVE)
  target_link_libraries(${T} PUBLIC native)
endif()

set(T "distrbasic")
add_library(${T} distrbasic.cpp)
target_link_libraries(${T} PUBLIC distrsolver utildistr PRIVATE use_backend)
