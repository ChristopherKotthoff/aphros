.POSIX:
.SUFFIXES:
SRC = .
WRK = .
L = libaphros_static.a
J = libaphros_js.a
CXX = g++
CC = c99
LINK = $(CXX)
CXXFLAGS = -O2 -g
CFLAGS = -O2 -g
CXXFLAGS_STD = -std=c++14
FLAGS_FPIC = -fPIC
CC_RULE = $(CC) -c $(CFLAGS) $(FLAGS_FPIC) -o $@
CXX_RULE = $(CXX) -c $(CXXFLAGS) $(CXXFLAGS_STD) $(FLAGS_FPIC) -I$(SRC) $1 -o $@
1 = \
-D_ALIGNBYTES_=16 \
-D_USE_AMGX_=0 \
-D_USE_AVX_=0 \
-D_USE_BACKEND_CUBISM_=0 \
-D_USE_BACKEND_LOCAL_=1 \
-D_USE_BACKEND_NATIVE_=1 \
-D_USE_DIM1_=0 \
-D_USE_DIM2_=1 \
-D_USE_DIM3_=1 \
-D_USE_DIM4_=0 \
-D_USE_FPZIP_=0 \
-D_USE_HDF_=0 \
-D_USE_HYPRE_=0 \
-D_USE_MPI_=0 \
-D_USE_OPENMP_=1 \
-D_USE_OVERLAP_=0 \

all: $(WRK)/$L $(WRK)/ap.mfer
include $(SRC)/../make/obj.mk
include $(SRC)/../make/dir.mk
include $(SRC)/../make/hdr.mk
include $(SRC)/../make/rule.mk
include $(SRC)/../make/dir.dep.mk
include $(SRC)/../make/dir.rule.mk
$(WRK)/$L: $O; mkdir -p $(WRK) && ar rv $@ $O && ranlib $@
$(WRK)/$J: $O; mkdir -p $(WRK) && emar rv $@ $O
$(WRK)/ap.mfer: $(WRK)/main.o $(WRK)/$L; mkdir -p $(WRK) && $(LINK) $< $(LDFLAGS) $(WRK)/$L -o $@
$(WRK)/main.o: $(SRC)/main.c; mkdir -p $(WRK) && $(CC_RULE) $(SRC)/main.c
$(WRK)/.dir:; mkdir -p $P && touch $@
$(SRC)/util/gitgen.cpp:; $(SRC)/gitrev $@
install: $(WRK)/$L $(WRK)/ap.mfer
	mkdir -p '$(APHROS_PREFIX)'/lib '$(APHROS_PREFIX)'/bin '$(APHROS_PREFIX)'/include
	for i in $D; \
	do mkdir -p '$(APHROS_PREFIX)'/include/aphros/$$i; \
	done
	cp aphros_c.h '$(APHROS_PREFIX)'/include
	for i in $H; \
	do cp $$i '$(APHROS_PREFIX)'/include/aphros/$$i; \
	done
	cp $(WRK)/$L '$(APHROS_PREFIX)'/lib
	cp $(WRK)/ap.mfer '$(APHROS_PREFIX)'/bin
install_js: $(WRK)/$J
	mkdir -p '$(APHROS_PREFIX)'/lib
	cp $(WRK)/$J "$(APHROS_PREFIX)"/lib
clean:
	-rm -f $O $(WRK)/.dir $(WRK)/$L $(WRK)/$J $(WRK)/ap.mfer
	-rmdir $P
include $(SRC)/../make/dep.mk
