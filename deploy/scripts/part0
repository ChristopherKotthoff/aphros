#!/usr/bin/env python3

import sys

dim = 3
rd = range(dim)


# product of triplet
def Prod(p):
    r = 1
    for i in rd:
        r *= p[i]
    return r


# true if p is divisible by b
# p, b: triplets
def IsDivisible(p, b):
    return all(p[i] % b[i] == 0 for i in rd)


# divide p by b
def Div(p, b):
    return [p[i] // b[i] for i in rd]


def GetBlocks(p):
    global bp
    assert IsDivisible(bp, p)
    return Div(bp, p)


# Value to maximize: minus communication area.
# p: processors
def Quality(p):
    global bs
    b = GetBlocks(p)

    # area normal to each direction
    a = [Prod(b) // b[i] * Prod(bs) // bs[i] for i in rd]
    return -sum(a)


v = sys.argv
vn = 1 + 2 * dim + 1

if len(v) != vn:
    print("""usage: {:} nx ny nz bsx bsy bsz nproc
Partition mesh minimizing the communication area.
ARGS:
  nx,ny,nz: mesh size
  bsx,bsy,bsz: block size
  nproc: number of processors
STDOUT:
  px,py,pz: processors, nproc=px*py*pz
  bx,by,bz: blocks per processor, px*bx*bsx=nx
""".format(v[0]))
    exit(1)

nx, ny, nz, bsx, bsy, bsz, nproc = map(int, v[1:])

i = 1
n = list(map(int, v[i:i + dim]))
i += dim
bs = list(map(int, v[i:i + dim]))
i += dim
nproc = int(v[i])
i += 1
assert i == vn

# check n divisible by bs
if not IsDivisible(n, bs):
    sys.stderr.write(
        "Error: mesh size {:} not divisible by block size {:}\n".format(n, bs))
    exit(1)

# b*p
bp = Div(n, bs)

# check bp divisible by nproc
if Prod(bp) % nproc != 0:
    sys.stderr.write(
        "Error: number of blocks {:} not divisible by nproc={:}\n".format(
            Prod(bp), nproc))
    exit(1)

# divisors of nproc
divisors = [i for i in range(1, nproc + 1) if nproc % i == 0]

# maximize Quality(p)
best_p = None  # best p
for px in divisors:
    for py in divisors:
        pz = nproc // (px * py)
        p = [px, py, pz]

        if Prod(p) != nproc:
            continue

        if not IsDivisible(bp, p):
            continue

        b = GetBlocks(p)

        assert all(p[i] * b[i] * bs[i] == n[i] for i in rd)

        if (best_p is None or Quality(p) > Quality(best_p)):
            best_p = p

assert best_p, "Can't partition"

o = sys.stdout
for a in best_p + GetBlocks(best_p):
    o.write("{:} ".format(a))
o.write("\n")
